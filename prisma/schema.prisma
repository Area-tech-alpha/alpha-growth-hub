generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "provider_unique_id")
  @@index([userId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  sessionToken String   @unique
  userId       String
  expires      DateTime @db.Timestamptz(6)
  users        users?   @relation(fields: [usersId], references: [id])
  usersId      String?

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token], map: "token_identifier_unique")
}

model auctions {
  id                                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lead_id                            String         @db.Uuid
  minimum_bid                        Decimal        @db.Decimal(10, 2)
  status                             String         @default("open") @db.VarChar(20)
  winning_bid_id                     String?        @unique @db.Uuid
  expired_at                         DateTime       @db.Timestamptz(6)
  created_at                         DateTime?      @default(now()) @db.Timestamptz(6)
  leads                              leads          @relation(fields: [lead_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  bids_auctions_winning_bid_idTobids bids?          @relation("auctions_winning_bid_idTobids", fields: [winning_bid_id], references: [id], onUpdate: NoAction, map: "fk_winning_bid")
  bids_bids_auction_idToauctions     bids[]         @relation("bids_auction_idToauctions")
  credit_holds                       credit_holds[]

  @@index([lead_id])
  @@index([status, expired_at], map: "idx_auctions_status_expired_at")
}

model bids {
  id                                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auction_id                             String    @db.Uuid
  user_id                                String
  amount                                 Decimal   @db.Decimal(10, 2)
  created_at                             DateTime? @default(now()) @db.Timestamptz(6)
  auctions_auctions_winning_bid_idTobids auctions? @relation("auctions_winning_bid_idTobids")
  auctions_bids_auction_idToauctions     auctions  @relation("bids_auction_idToauctions", fields: [auction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                                  users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([auction_id])
  @@index([user_id])
  @@index([auction_id, created_at(sort: Desc)], map: "idx_bids_auction_id_created_at")
}

model credit_transactions {
  id                BigInt           @id @default(autoincrement())
  asaas_payment_id  String           @unique
  user_id           String
  amount_paid       Decimal          @db.Decimal(10, 2)
  credits_purchased Decimal          @db.Decimal(10, 2)
  metadata          Json?
  status            String           @default("completed") @db.VarChar(50)
  created_at        DateTime?        @default(now()) @db.Timestamptz(6)
  users             users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ledger_entries    ledger_entries[]

  @@index([user_id])
}

model leads {
  id                   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_name         String     @db.VarChar(255)
  contact_name         String     @db.VarChar(255)
  phone                String     @db.VarChar(50)
  email                String     @db.VarChar(255)
  revenue              Decimal    @db.Decimal(15, 2)
  marketing_investment Decimal    @db.Decimal(12, 2)
  location             String?    @db.VarChar(255)
  segment              String?    @db.VarChar(100)
  minimum_value        Decimal?   @db.Decimal(15, 2)
  status               String     @default("cold") @db.VarChar(50)
  channel              String?    @db.VarChar(100)
  owner_id             String?
  created_at           DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?  @default(now()) @db.Timestamptz(6)
  auctions             auctions[]
  users                users?     @relation(fields: [owner_id], references: [id], onUpdate: NoAction)

  @@index([owner_id])
  @@index([status])
  @@index([owner_id], map: "idx_leads_owner_id")
}

model ledger_entries {
  id                  BigInt              @id @default(autoincrement())
  transaction_id      BigInt
  user_id             String
  account_type        account_type_enum
  amount              Decimal             @db.Decimal(10, 2)
  created_at          DateTime?           @default(now()) @db.Timestamptz(6)
  credit_transactions credit_transactions @relation(fields: [transaction_id], references: [id], onUpdate: NoAction)
  users               users               @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([transaction_id])
  @@index([user_id])
}

model processed_webhooks {
  event_key  String              @id
  status     webhook_status_enum @default(queued)
  created_at DateTime?           @default(now()) @db.Timestamptz(6)
}

model users {
  id                  String                @id
  credit_balance      Decimal               @default(0.00) @db.Decimal(10, 2)
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  updated_at          DateTime              @default(now()) @db.Timestamptz(6)
  name                String?
  email               String?               @unique // ðŸ‘ˆ Adicione @unique para o email
  email_verified      DateTime?             @db.Timestamptz(6)
  avatar_url          String?
  bids                bids[]
  credit_transactions credit_transactions[]
  leads               leads[]
  ledger_entries      ledger_entries[]

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @db.Timestamptz(6)
  image         String?
}

model credit_holds {
  id         BigInt                  @id @default(autoincrement())
  user_id    String
  auction_id String                  @db.Uuid
  amount     Decimal                 @db.Decimal(10, 2)
  status     credit_hold_status_enum @default(active)
  created_at DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at DateTime?               @default(now()) @db.Timestamptz(6)
  auctions   auctions                @relation(fields: [auction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, auction_id], map: "credit_holds_user_auction_unique")
  @@index([auction_id], map: "idx_credit_holds_auction_id")
  @@index([user_id], map: "idx_credit_holds_user_id")
}

enum account_type_enum {
  USER_CREDITS
  PLATFORM_REVENUE
}

enum webhook_status_enum {
  queued
  processed
  failed
}

enum credit_hold_status_enum {
  active
  released
  consumed
}
