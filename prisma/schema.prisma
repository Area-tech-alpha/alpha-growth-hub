generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountTypeEnum {
  USER_CREDITS
  PLATFORM_REVENUE

  @@map("account_type_enum")
}

enum WebhookStatusEnum {
  queued
  processed
  failed

  @@map("webhook_status_enum")
}

model AuthUser {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("emailVerified") @db.Timestamptz
  image         String?

  accounts Account[]
  sessions Session[]
  user     User?

  @@map("auth_users")
}

model Account {
  id                String   @id @default(uuid())
  userId            String   @map("userId")
  type              String
  provider          String
  providerAccountId String   @map("providerAccountId")
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  authUser          AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "provider_unique_id")
  @@map("Account")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("sessionToken")
  userId       String   @map("userId")
  expires      DateTime @db.Timestamptz

  authUser AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz

  @@unique([identifier, token], map: "token_identifier_unique")
  @@map("VerificationToken")
}

model User {
  id            String   @id
  creditBalance Decimal  @default(0.00) @map("credit_balance") @db.Decimal(10, 2)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamptz

  authUser           AuthUser            @relation(fields: [id], references: [id], onDelete: Cascade)
  ownedLeads         Lead[]
  bids               Bid[]
  creditTransactions CreditTransaction[]
  ledgerEntries      LedgerEntry[]

  @@map("users")
}

model Lead {
  id                  String    @id @default(uuid()) @db.Uuid
  companyName         String    @map("company_name") @db.VarChar(255)
  contactName         String    @map("contact_name") @db.VarChar(255)
  phone               String    @db.VarChar(50)
  email               String    @db.VarChar(255)
  revenue             Decimal   @db.Decimal(15, 2)
  marketingInvestment Decimal   @map("marketing_investment") @db.Decimal(12, 2)
  location            String?   @db.VarChar(255)
  segment             String?   @db.VarChar(100)
  minimumValue        Decimal?  @map("minimum_value") @db.Decimal(15, 2)
  status              String    @default("cold") @db.VarChar(50)
  channel             String?   @db.VarChar(100) // A propriedade que causava o erro!
  ownerId             String?   @map("owner_id")
  createdAt           DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime? @default(now()) @map("updated_at") @db.Timestamptz

  owner   User?    @relation(fields: [ownerId], references: [id], onUpdate: NoAction)
  auction Auction?

  @@map("leads")
}

model Auction {
  id           String    @id @default(uuid()) @db.Uuid
  leadId       String    @unique @map("lead_id") @db.Uuid
  minimumBid   Decimal   @map("minimum_bid") @db.Decimal(10, 2)
  status       String    @default("open") @db.VarChar(20)
  winningBidId String?   @unique @map("winning_bid_id") @db.Uuid
  expiredAt    DateTime  @map("expired_at") @db.Timestamptz
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz

  lead       Lead  @relation(fields: [leadId], references: [id], onDelete: Cascade)
  winningBid Bid?  @relation("WinningBid", fields: [winningBidId], references: [id], onUpdate: NoAction, map: "fk_winning_bid")
  bids       Bid[]

  @@map("auctions")
}

model Bid {
  id        String    @id @default(uuid()) @db.Uuid
  auctionId String    @map("auction_id") @db.Uuid
  userId    String    @map("user_id")
  amount    Decimal   @db.Decimal(10, 2)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz

  auction        Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  winningAuction Auction? @relation("WinningBid") // Relação para identificar o lance vencedor

  @@map("bids")
}

model ProcessedWebhook {
  eventKey  String            @id @map("event_key")
  status    WebhookStatusEnum @default(queued)
  createdAt DateTime?         @default(now()) @map("created_at") @db.Timestamptz

  @@map("processed_webhooks")
}

model CreditTransaction {
  id               BigInt    @id @default(autoincrement())
  asaasPaymentId   String    @unique @map("asaas_payment_id")
  userId           String    @map("user_id")
  amountPaid       Decimal   @map("amount_paid") @db.Decimal(10, 2)
  creditsPurchased Decimal   @map("credits_purchased") @db.Decimal(10, 2)
  metadata         Json?
  status           String    @default("completed") @db.VarChar(50)
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamptz

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  ledgerEntries LedgerEntry[]

  @@map("credit_transactions")
}

model LedgerEntry {
  id            BigInt          @id @default(autoincrement())
  transactionId BigInt          @map("transaction_id")
  userId        String          @map("user_id")
  accountType   AccountTypeEnum @map("account_type")
  amount        Decimal         @db.Decimal(10, 2)
  createdAt     DateTime?       @default(now()) @map("created_at") @db.Timestamptz

  transaction CreditTransaction @relation(fields: [transactionId], references: [id], onUpdate: NoAction)
  user        User              @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@map("ledger_entries")
}
